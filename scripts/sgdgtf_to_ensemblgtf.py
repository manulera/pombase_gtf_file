"""
This script converts the gtf file from PomBase to the format of Ensembl gtf files.
It adds gene_biotype and transcript_biotype attributes based on the data from the file
gene_IDs_names_products.tsv from releases
"""
import pandas
import csv
import argparse
import re

def main(input_file, output_file):

    # Hacky:
    with open('data/protein_coding_sgd.tsv') as f:
        protein_coding_genes = set([line.strip() for line in f.readlines()])

    data = pandas.read_csv(input_file, sep='\t', header=None)
    data.columns = ['seqname', 'source', 'feature', 'start', 'end', 'score', 'strand', 'frame', 'attribute']

    data['transcript_id'] = data.attribute.str.extract('transcript_id "([^"]+)"')
    data['systematic_id'] = data['transcript_id'].apply(lambda x: x.split('_')[0])

    # In the gtf file generated by bioconvert, the RNA genes exons are saved as CDS (WARNING: maybe the library changes in the future)
    data.loc[(data.feature == 'CDS') & ~data.transcript_id.str.contains('mRNA'), 'feature'] = 'exon'

    row_list = list()
    for i, row in data.iterrows():

        # Add gene row on top of transcript
        if row.feature == 'transcript':
            gene_biotype = 'protein_coding' if row.systematic_id in protein_coding_genes else 'ncRNA'
            gene_row = row.copy()
            gene_row.feature = 'gene'
            gene_row.attribute = 'gene_id "{}"; gene_biotype "{}";'.format(row.systematic_id, gene_biotype)
            row_list.append(gene_row)

            # Add gene_biotype to transcript (for some reason the transcript rows generated by bioconvert don't end on ";") (WARNING: maybe the library changes in the future)
            row.attribute = row.attribute + '; transcript_biotype "{}";'.format(gene_biotype)

        # Set the right gene_id
        if 'gene_id' in row.attribute:
            row.attribute = re.sub(r'gene_id .*?;', 'gene_id "{}";'.format(row.systematic_id), row.attribute)
        else:
            row.attribute = row.attribute + ' gene_id "{}";'.format(row.systematic_id)
        if row.transcript_id == row.systematic_id:
            new_transcript_id = row.systematic_id + '_dummy'
            row.attribute = re.sub(r'transcript_id .*?;', 'transcript_id "{}";'.format(new_transcript_id), row.attribute)

        row_list.append(row)


    out_data = pandas.DataFrame(row_list)

    # We want to have a single row for each gene, so we transform it into the one that encompasses all the transcripts
    repeated_genes = out_data.loc[out_data.feature == 'gene', :]
    repeated_genes = repeated_genes[repeated_genes['systematic_id'].duplicated(keep=False)]
    repeated_genes = repeated_genes.groupby(['systematic_id', 'feature'], as_index=False).agg({'start': lambda x: min(x), 'end': lambda x: max(x)})
    repeated_genes.rename(columns={'start': 'new_start', 'end': 'new_end'}, inplace=True)
    out_data = out_data.merge(repeated_genes, on=['systematic_id', 'feature'], how='left')
    # Substitute the start and end of the gene by the new ones where they exist
    out_data.loc[~out_data.new_start.isna(), 'start'] = out_data.loc[~out_data.new_start.isna(), 'new_start']
    out_data.loc[~out_data.new_end.isna(), 'end'] = out_data.loc[~out_data.new_end.isna(), 'new_end']
    out_data.drop(columns=['transcript_id', 'systematic_id', 'new_start', 'new_end'], inplace=True)
    out_data.drop_duplicates(inplace=True)
    out_data.to_csv(output_file, sep='\t', quoting=csv.QUOTE_NONE, header=False, index=False)


if __name__ == '__main__':
    class Formatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
        pass

    parser = argparse.ArgumentParser(description=__doc__, formatter_class=Formatter)
    parser.add_argument('--input_file', help='input gtf file')
    parser.add_argument('--output_file', help='corrected gtf file')
    args = parser.parse_args()
    main(args.input_file, args.output_file)